{% extends "layout.html" %}

{% block page_css %}
    <link rel="stylesheet" href="{{ url_for('static', filename='ace/css/chosen.min.css') }}"/>
{% endblock %}

{% block parent_node %}<a href="{{ url_for('web.index') }}">Home</a>{% endblock %}
{% block current_node %}扫描任务{% endblock %}

{% block content %}
    <div class="tabbable">
        <ul class="nav nav-tabs tab-size-bigger">
            <li class="active"><a data-toggle="tab" href="#adminUser">任务列表</a></li>

        </ul>
        <div class="tab-content padding-24">
            {% macro macro_roles() %}

                {% for role in roles %}
                    <option value="{{ role.cname }}">{{ role.cname }}</option>
                {% endfor %}
            {% endmacro %}
            <div id="tab-task_list" class="tab-pane fade in active">
                <div class="row">
                    <div class="col-xs-12">
                        {#                    {%- if 'create_task' in session.get('selectors', ()) -%}#}
                        <a class="btn btn-xs btn-info" href=" {{ url_for('add_task_html') }}">
                            <i class="ace-icon fa fa-plus bigger-120"></i>新增扫描任务
                        </a>
                        {#                    {%- endif -%}#}
                        <table class="table table-striped table-bordered table-hover">
                            <thead>
                            <tr>
                                <th style="display: none">JOB_ID</th>
                                <th>TASK_ID</th>
                                <th>名称</th>
                                <th>域名</th>
                                <th>扫描开始时间</th>
                                <th>状态</th>
                                <th>扫描进度</th>
                                <th>操作</th>
                            </tr>
                            </thead>
                            <tbody>
                            {%- for task_job in task_jobs -%}

                                <tr id="job-{{ task_job.ApJobsTaskRef.id }}">
                                    <td>{{ task_job.Task.id }}</td>
                                    <td>{{ task_job.Task.name }}</td>
                                    <td>{{ task_job.Task | get_task_domain }}</td>
                                    <td>{{ task_job.ApJobsTaskRef.run_time }}</td>
                                    <td>{{ task_job.ApJobsTaskRef.job_status | get_job_task_status }}</td>
                                    <td>
                                        <div id="progress-{{ task_job.Task.id }}"></div>
                                    </td>
                                    <td>
                                        <div class="hidden-sm hidden-xs btn-group">
                                            {#    {%- if 'adminCreateUser' in session.get('selectors', ()) -%} #}
                                            {#                                            <button class="btn btn-sm btn-info" {% if task_job.ApJobsTaskRef.job_status != 2 %}disabled {% endif %}#}
                                            {#                                                    onclick="schedule_job('{{ task_job.ApJobsTaskRef.job_id }}','pause')">#}
                                            {#                                                <i class="ace-icon fa fa-pause bigger-120"></i>暂停#}
                                            {#                                            </button>#}
                                            {#    {%- endif %}
                                        {%- if 'adminDeleteUser' in session.get('selectors', ()) -%}  #}
                                            {#                                            <button class="btn btn-sm btn-warning" {% if task_job.ApJobsTaskRef.job_status != 4 %}disabled {% endif %}#}
                                            {#                                                    onclick="schedule_job('{{ task_job.ApJobsTaskRef.job_id }}','resume')">#}
                                            {#                                                <i class="ace-icon fa fa-refresh bigger-120"></i>恢复#}
                                            {#                                            </button>#}
                                            {% if task_job.ApJobsTaskRef.job_status == 1 %}
                                                <a class="btn btn-sm btn-info"
                                                   href="{{ url_for('add_task_html') }}/{{ task_job.Task.id }}">
                                                    <i class="ace-icon fa fa-trash-o bigger-120"></i>编辑
                                                </a>
                                            {% endif %}
                                            <button class="btn btn-sm btn-danger"
                                                    {% if task_job.ApJobsTaskRef.job_status != 1 %}disabled {% endif %}
                                                    onclick="del_task_job('{{ task_job.Task.id }}')">
                                                <i class="ace-icon fa fa-trash-o bigger-120"></i>删除
                                            </button>
                                            {#    {%- endif -%} #}
                                        </div>
                                    </td>
                                </tr>
                            {%- endfor -%}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


        </div>
    </div>


{% endblock %}

{% block page_js %}
    <script src="{{ url_for('static', filename='ace/js/chosen.jquery.min.js') }}"></script>
    <script src="{{ url_for('static', filename='ace/js/jquery.validate.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/nanobar.min.js') }}"></script>
{% endblock %}
{% block inline_js %}
    <script type="text/javascript">
        function schedule_job(job_id, oper) {

            $.ajax({
                url: "{{ url_for('scheduler_job') }}",
                type: "POST",
                data: {job_id: job_id, operation: oper},
                enctype: "multipart/form-data",
                statusCode: {
                    403: function () {
                        alert("权限不足, 请联系管理员");
                    }
                }


            }).done(function (result) {
                alert(result.desc);
                if (result.status) {
                    window.location.href = "{{ url_for('tasks_list') }}";
                }
            });
            return false;
        }

        function del_task_job(job_id) {
            alert(job_id);
            if (!window.confirm('是否_删除任务_')) {
            } else {
                $.ajax({
                    url: "{{ url_for('add_task') }}/" + job_id,
                    type: "DELETE",
                    enctype: "multipart/form-data",
                    processData: false,
                    contentType: false,
                    statusCode: {
                        403: function () {
                            alert("权限不足, 请联系管理员");
                        }
                    }
                }).done(function (result) {
                    alert(result.desc);
                    if (result.status) {
                        window.location.href = "{{ url_for('tasks_list') }}";
                    }
                });
            }
            return false;
        }
        {#function userOnclick(userId) {#}
        {#    var tr = $('#user-'+userId);#}
        {#    document.getElementById('modal-form-userId').value = userId;#}
        {#    document.getElementById('modal-form-userName').value = tr.find('td:eq(0)').text();#}
        {#    document.getElementById('modal-form-userCName').value = tr.find('td:eq(1)').text();#}
        {#    document.getElementById('modal-form-userEmail').value = tr.find('td:eq(2)').text();#}
        {#    document.getElementById('modal-form-userMoblile').value = tr.find('td:eq(3)').text();#}
        {#    document.getElementById('modal-form-userCompany').value = tr.find('td:eq(5)').text();#}
        {#    document.getElementById('modal-form-userDepartment').value = tr.find('td:eq(6)').text();#}
        {#    //document.getElementById('modal-form-userRole').value = tr.find('td:eq(7)').text();#}
        {#    var $opt = $("#modal-form-userRole option[value='"+tr.find('td:eq(7)').text()+"']");#}
        {#    $opt.attr("selected", true);#}
        {#    document.getElementById('modal-form-userGroups').value = tr.find('td:eq(9)').text();#}
        {#    $('#modal-form-user').modal('show');#}
        {#    return false;#}
        {#}#}


            jQuery(function ($) {
                if (!ace.vars['touch']) {
                    $('.chosen-select').chosen({allow_single_deselect: true});

                    $(window)
                            .off('resize.chosen')
                            .on('resize.chosen', function () {
                                $('.chosen-select').each(function () {
                                    var $this = $(this);
                                    $this.next().css({'width': $this.parent().width()});
                                })
                            }).trigger('resize.chosen');

                    $('#modal-form').on('show.bs.modal', function () {
                        if (!ace.vars['touch']) {
                            $(this).find('.chosen-container').each(function () {
                                $(this).find('a:first-child').css('width', '210px');
                                $(this).find('.chosen-drop').css('width', '210px');
                                $(this).find('.chosen-search input').css('width', '210px');
                            });
                        }
                    });
                }

                {%- for item in ('user', 'group', 'selector') -%}
                    $('#modal-form-add-{{ item }} form.form-horizontal').validate({
                        errorElement: 'div',
                        errorClass: 'help-block',
                        focusInvalid: false,
                        ignore: '',
                        highlight: function (e) {
                            $(e).closest('.form-group').removeClass('has-info').addClass('has-error');
                        },
                        success: function (e) {
                            $(e).closest('.form-group').removeClass('has-error');
                            $(e).remove();
                        },
                        errorPlacement: function (error, element) {
                            if (element.is('input[type=checkbox]') || element.is('input[type=radio]')) {
                                var controls = element.closest('div[class*="col-"]');
                                if (controls.find(':checkbox,:radio').length > 1) controls.append(error);
                                else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0));
                            } else if (element.is('.select2')) {
                                error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)'));
                            } else if (element.is('.chosen-select')) {
                                error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)'));
                            } else {
                                error.insertAfter(element.parent());
                            }
                        },
                        submitHandler: function (form) {
                            create_{{ item }}(form);
                        },
                        invalidHandler: function (form) {
                        }
                    });
                    $('#modal-form-{{ item }} form.form-horizontal').validate({
                        errorElement: 'div',
                        errorClass: 'help-block',
                        focusInvalid: false,
                        ignore: '',
                        highlight: function (e) {
                            $(e).closest('.form-group').removeClass('has-info').addClass('has-error');
                        },
                        success: function (e) {
                            $(e).closest('.form-group').removeClass('has-error');
                            $(e).remove();
                        },
                        errorPlacement: function (error, element) {
                            if (element.is('input[type=checkbox]') || element.is('input[type=radio]')) {
                                var controls = element.closest('div[class*="col-"]');
                                if (controls.find(':checkbox,:radio').length > 1) controls.append(error);
                                else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0));
                            } else if (element.is('.select2')) {
                                error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)'));
                            } else if (element.is('.chosen-select')) {
                                error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)'));
                            } else {
                                error.insertAfter(element.parent());
                            }
                        },
                        submitHandler: function (form) {
                            put_{{ item }}(form);
                        },
                        invalidHandler: function (form) {
                        }
                    });
                {%- endfor -%}
            })
    </script>
    <script>

        //move bar
        // size bar 30%

        // Finish progress bar
        //nanobar.go(100);
        function test(id) {
            var nanobar = new Nanobar({
                bg: '#acf',
                target: document.getElementById('progress-' + id),
                id: 'mynano'
            });
            nanobar.go(10)
            function showProgress() {
                var progress = 0;
                $.ajax({
                    type: "GET",
                    url: "{{ url_for('job_progress') }}/" + id,
                    dataType: "json",
                    success: function (result) {
                        console.log(result);
                        progress = result.current;
                        nanobar.go(progress * 100);
                    }
                });
            }
            setInterval(showProgress, 10000);
        }
        test(145);
    </script>
{% endblock %}
